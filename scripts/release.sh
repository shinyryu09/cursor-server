#!/bin/bash

# MCP Cursor Server Release Script
# Usage: ./scripts/release.sh <version> [type]
# Example: ./scripts/release.sh 2.1.0 minor

set -e

VERSION=$1
TYPE=${2:-patch}

if [ -z "$VERSION" ]; then
    echo "‚ùå Usage: ./scripts/release.sh <version> [type]"
    echo "   Example: ./scripts/release.sh 2.1.0 minor"
    exit 1
fi

echo "üöÄ Starting release process for v$VERSION..."

# ÌòÑÏû¨ Î∏åÎûúÏπò ÌôïÏù∏
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "develop" ]; then
    echo "‚ö†Ô∏è  Warning: You are not on develop branch (current: $CURRENT_BRANCH)"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# ÏµúÏã† develop Î∏åÎûúÏπòÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
echo "üì• Updating develop branch..."
git checkout develop
git pull origin develop

# Î¶¥Î¶¨Ï¶à Î∏åÎûúÏπò ÏÉùÏÑ±
RELEASE_BRANCH="release/v$VERSION"
echo "üåø Creating release branch: $RELEASE_BRANCH"
git checkout -b $RELEASE_BRANCH

# Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
echo "üì¶ Updating version to v$VERSION..."
npm version $VERSION --no-git-tag-version

# CHANGELOG ÏÉùÏÑ±
echo "üìù Generating changelog..."
npm run version:changelog

# Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã
echo "üíæ Committing release preparation..."
git add .
git commit -m "chore(release): prepare v$VERSION

- Update version to $VERSION
- Generate changelog
- Update documentation"

# main Î∏åÎûúÏπòÎ°ú Î®∏ÏßÄ
echo "üîÑ Merging to main branch..."
git checkout main
git pull origin main
git merge --no-ff $RELEASE_BRANCH -m "chore(release): merge release/v$VERSION to main"

# ÌÉúÍ∑∏ ÏÉùÏÑ±
echo "üè∑Ô∏è  Creating tag v$VERSION..."
git tag -a v$VERSION -m "Release version $VERSION

$(npm run version:changelog --silent | head -20)"

# main Î∏åÎûúÏπò Ìë∏Ïãú
echo "üì§ Pushing main branch and tag..."
git push origin main
git push origin v$VERSION

# develop Î∏åÎûúÏπòÎ°ú Î®∏ÏßÄ
echo "üîÑ Merging back to develop..."
git checkout develop
git merge --no-ff $RELEASE_BRANCH -m "chore(release): merge release/v$VERSION to develop"
git push origin develop

# Î¶¥Î¶¨Ï¶à Î∏åÎûúÏπò ÏÇ≠Ï†ú
echo "üßπ Cleaning up release branch..."
git branch -d $RELEASE_BRANCH
git push origin --delete $RELEASE_BRANCH 2>/dev/null || true

# GitHub Release ÏÉùÏÑ± (gh CLIÍ∞Ä ÏûàÎäî Í≤ΩÏö∞)
if command -v gh &> /dev/null; then
    echo "üìã Creating GitHub release..."
    gh release create v$VERSION \
        --title "Release v$VERSION" \
        --notes "$(npm run version:changelog --silent)" \
        --latest
else
    echo "‚ÑπÔ∏è  GitHub CLI not found. Please create release manually at:"
    echo "   https://github.com/shinyryu09/cursor-server/releases/new"
fi

echo "‚úÖ Release v$VERSION completed successfully!"
echo ""
echo "üìã Summary:"
echo "   - Version: v$VERSION"
echo "   - Branch: $RELEASE_BRANCH (deleted)"
echo "   - Tag: v$VERSION"
echo "   - Main branch: updated"
echo "   - Develop branch: updated"
echo ""
echo "üîó Links:"
echo "   - Repository: https://github.com/shinyryu09/cursor-server"
echo "   - Releases: https://github.com/shinyryu09/cursor-server/releases"
echo "   - Latest: https://github.com/shinyryu09/cursor-server/releases/tag/v$VERSION"
